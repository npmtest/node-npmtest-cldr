{"/home/travis/build/npmtest/node-npmtest-cldr/test.js":"/* istanbul instrument in package npmtest_cldr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cldr/lib.npmtest_cldr.js":"/* istanbul instrument in package npmtest_cldr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cldr = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cldr = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cldr/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cldr && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cldr */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cldr\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cldr.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cldr.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cldr.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cldr.__dirname + '/lib.npmtest_cldr.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cldr/node_modules/cldr/lib/cldr.js":"var Path = require('path'),\n    fs = require('fs'),\n    _ = require('underscore'),\n    passError = require('passerror'),\n    memoizeAsync = require('memoizeasync'),\n    DOMParser = require('xmldom').DOMParser,\n    xpath = require('xpath'),\n    seq = require('seq'),\n    normalizeLocaleId = require('./normalizeLocaleId'),\n    normalizeProperty = require('./normalizeProperty'),\n    convertObjectsWithIntegerKeysToArrays = require('./convertObjectsWithIntegerKeysToArrays'),\n    CldrPluralRuleSet = require('./CldrPluralRuleSet'),\n    CldrRbnfRuleSet = require('./CldrRbnfRuleSet'),\n    uglifyJs = require('uglify-js'),\n    unicoderegexp = require('unicoderegexp');\n\nfunction normalizeXPathQuery(xpathQuery) {\n    var xpathQueryFragments = xpathQuery.split('/');\n    for (var i = 0 ; i < xpathQueryFragments.length ; i += 1) {\n        if (i > 0 && xpathQueryFragments[i] === '..' && xpathQueryFragments[i - 1] !== '..') {\n            xpathQueryFragments.splice(i - 1, 2);\n            i -= 2;\n        }\n    }\n    return xpathQueryFragments.join('/');\n}\n\nfunction Cldr(cldrPath) {\n    // Support instantiation without the 'new' operator:\n    if (!(this instanceof Cldr)) {\n        return new Cldr(cldrPath);\n    }\n    this.cldrPath = cldrPath;\n    this.documentByFileName = {};\n    this.memoizerByFileName = {};\n}\n\nCldr.prototype = {\n    get fileNamesByTypeAndNormalizedLocaleId() {\n        if (!this._fileNamesByTypeAndNormalizedLocaleId) {\n            this._fileNamesByTypeAndNormalizedLocaleId = {};\n            ['main', 'rbnf'].forEach(function (type) {\n                this._fileNamesByTypeAndNormalizedLocaleId[type] = {};\n                var fileNames;\n                try {\n                    fileNames = fs.readdirSync(Path.resolve(this.cldrPath, 'common', type));\n                } catch (e) {\n                    if (e.code === 'ENOENT') {\n                        // Directory doesn't exist, just pretend it's empty.\n                        return;\n                    }\n                }\n                fileNames.forEach(function (fileName) {\n                    var matchFileName = fileName.match(/^(.*)\\.xml$/);\n                    if (matchFileName) {\n                        this._fileNamesByTypeAndNormalizedLocaleId[type][normalizeLocaleId(matchFileName[1])] =\n                            Path.resolve(this.cldrPath, 'common', type, fileName);\n                    }\n                }, this);\n            }, this);\n        }\n        return this._fileNamesByTypeAndNormalizedLocaleId;\n    },\n\n    get localeIds() {\n        if (!this._localeIds) {\n            this._localeIds = Object.keys(this.fileNamesByTypeAndNormalizedLocaleId.main);\n        }\n        return this._localeIds;\n    },\n\n    get calendarIds() {\n        if (!this._calendarIds) {\n            this._calendarIds = [];\n            xpath.select('/ldmlBCP47/keyword/key[@name=\"ca\"]/type', this.getDocument(Path.resolve(this.cldrPath, 'common', 'bcp47', 'calendar.xml'))).forEach(function (keyNode) {\n                var calendarId = keyNode.getAttribute('name');\n                if (calendarId === 'gregory') {\n                    calendarId = 'gregorian';\n                }\n                this._calendarIds.push(calendarId);\n            }, this);\n        }\n        return this._calendarIds;\n    },\n\n    get numberSystemIds() {\n        if (!this._numberSystemIds) {\n            this._numberSystemIds = [];\n            xpath.select('/ldmlBCP47/keyword/key[@name=\"nu\"]/type', this.getDocument(Path.resolve(this.cldrPath, 'common', 'bcp47', 'number.xml'))).forEach(function (keyNode) {\n                this._numberSystemIds.push(keyNode.getAttribute('name'));\n            }, this);\n        }\n        return this._numberSystemIds;\n    },\n\n    get localesByParentLocale() {\n        if (!this._localesByParentLocale) {\n            this._localesByParentLocale = {};\n            xpath.select('/supplementalData/parentLocales/parentLocale', this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'supplementalData.xml'))).forEach(function (parentLocaleNode) {\n                this._localesByParentLocale[normalizeLocaleId(parentLocaleNode.getAttribute('parent'))] = parentLocaleNode.getAttribute('locales').split(' ').map(function (localeId) {\n                    return normalizeLocaleId(localeId);\n                });\n            }, this);\n        }\n        return this._localesByParentLocale;\n    },\n\n    // Works both async and sync (omit cb):\n    getDocument: function (fileName, cb) {\n        var that = this;\n        if (that.documentByFileName[fileName]) {\n            if (cb) {\n                process.nextTick(function () {\n                    cb(null, that.documentByFileName[fileName]);\n                });\n            } else {\n                return that.documentByFileName[fileName];\n            }\n        } else {\n            if (cb) {\n                // Make sure not to load file more than once if it's being loaded when getDocument is called for the second time:\n                that.memoizerByFileName[fileName] = that.memoizerByFileName[fileName] || memoizeAsync(function (cb) {\n                    fs.readFile(fileName, 'utf-8', passError(cb, function (xmlString) {\n                        var document = new DOMParser().parseFromString(xmlString);\n                        that.documentByFileName[fileName] = document;\n                        cb(null, document);\n                    }));\n                });\n                that.memoizerByFileName[fileName](cb);\n            } else {\n                return that.documentByFileName[fileName] = new DOMParser().parseFromString(fs.readFileSync(fileName, 'utf-8'));\n            }\n        }\n    },\n\n    resolveParentLocaleId: function (localeId) {\n        localeId = normalizeLocaleId(localeId);\n        if (!localeId) {\n            return;\n        }\n        var parentLocaleId;\n        Object.keys(this.localesByParentLocale).forEach(function (_parentLocaleId) {\n            if (this.localesByParentLocale[_parentLocaleId].indexOf(localeId) > -1) {\n                parentLocaleId = _parentLocaleId;\n            }\n        }, this);\n        if (!parentLocaleId && /_[^_]+$/.test(localeId)) {\n            parentLocaleId = localeId.replace(/_[^_]+$/, '');\n        }\n        return parentLocaleId;\n    },\n\n    expandLocaleIdToPrioritizedList: function (localeId) {\n        localeId = normalizeLocaleId(localeId);\n        if (!localeId) {\n            return [];\n        }\n        var localeIds = [localeId];\n        var parentLocaleId = this.resolveParentLocaleId(localeId);\n        while (parentLocaleId) {\n            localeIds.push(parentLocaleId);\n            parentLocaleId = this.resolveParentLocaleId(parentLocaleId);\n        }\n        return localeIds;\n    },\n\n    getPrioritizedDocumentsForLocale: function (localeId, type) {\n        var that = this;\n        return that.expandLocaleIdToPrioritizedList(localeId).concat('root').map(function (subLocaleId) {\n            return that.fileNamesByTypeAndNormalizedLocaleId[type][normalizeLocaleId(subLocaleId)];\n        }).filter(function (fileName) {\n            return !!fileName;\n        }).map(function (fileName) {\n            return that.getDocument(fileName);\n        });\n    },\n\n    preload: function (localeIds, cb) {\n        var that = this;\n        if (typeof localeIds === 'function') {\n            cb = localeIds;\n            localeIds = that.localeIds;\n        }\n        localeIds = (Array.isArray(localeIds) ? localeIds : [localeIds]).map(normalizeLocaleId);\n        var neededLocaleById = {root: true};\n        localeIds.forEach(function (localeId) {\n            that.expandLocaleIdToPrioritizedList(localeId).forEach(function (subLocaleId) {\n                neededLocaleById[subLocaleId] = true;\n            });\n        });\n        var fileNames = [\n            Path.resolve(that.cldrPath, 'common', 'supplemental', 'plurals.xml'),\n            Path.resolve(that.cldrPath, 'common', 'supplemental', 'numberingSystems.xml')\n        ];\n        Object.keys(neededLocaleById).forEach(function (localeId) {\n            ['main', 'rbnf'].forEach(function (type) {\n                var fileName = that.fileNamesByTypeAndNormalizedLocaleId[type][localeId];\n                if (fileName) {\n                    fileNames.push(fileName);\n                }\n            });\n        });\n        seq(fileNames)\n            .parEach(20, function (fileName) {\n                that.getDocument(fileName, this);\n            })\n            .seq(function () {\n                cb();\n            })\n            .catch(cb);\n    },\n\n    createFinder: function (prioritizedDocuments) {\n        return function finder(xpathQuery) {\n            var prioritizedResults = [];\n            prioritizedDocuments.forEach(function (document, i) {\n                var resultsForLocaleDocument = xpath.select(xpathQuery, document);\n                if (resultsForLocaleDocument.length === 0 && i === (prioritizedDocuments.length - 1)) {\n                    // We're in root and there were no results, look for alias elements in path:\n                    var queryFragments = xpathQuery.split('/'),\n                        poppedQueryFragments = [];\n                    while (queryFragments.length > 1) {\n                        var aliasNodes = xpath.select(queryFragments.join('/') + '/alias', document);\n                        if (aliasNodes.length > 0) {\n                            var aliasSpecifiedQuery = normalizeXPathQuery(queryFragments.join('/') + '/' + aliasNodes[0].getAttribute('path') + '/' + poppedQueryFragments.join('/'));\n                            Array.prototype.push.apply(prioritizedResults, finder(aliasSpecifiedQuery));\n                            break;\n                        }\n                        poppedQueryFragments.unshift(queryFragments.pop());\n                    }\n                } else {\n                    Array.prototype.push.apply(prioritizedResults, resultsForLocaleDocument);\n                }\n            });\n            return prioritizedResults;\n        };\n    },\n\n    extractLocaleDisplayPattern: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            localeDisplayPattern = {};\n        finder('/ldml/localeDisplayNames/localeDisplayPattern/*').forEach(function (node) {\n            localeDisplayPattern[node.nodeName] = node.textContent;\n        });\n        return localeDisplayPattern;\n    },\n\n    extractLanguageDisplayNames: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            languageDisplayNames = {};\n        finder('/ldml/localeDisplayNames/languages/language').forEach(function (node) {\n            var id = normalizeLocaleId(node.getAttribute('type'));\n            languageDisplayNames[id] = languageDisplayNames[id] || node.textContent;\n        });\n        return languageDisplayNames;\n    },\n\n    extractTimeZoneDisplayNames: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            timeZoneDisplayNames = {};\n        finder('/ldml/dates/timeZoneNames/zone').forEach(function (zoneNode) {\n            var timeZoneId = zoneNode.getAttribute('type'),\n                exemplarCityNodes = xpath.select('exemplarCity', zoneNode),\n                tzNameLocale;\n            if (exemplarCityNodes.length > 0) {\n                tzNameLocale = exemplarCityNodes[0].textContent;\n            } else {\n                var genericDisplayNameNodes = xpath.select('long/generic', zoneNode);\n                if (genericDisplayNameNodes.length > 0) {\n                    tzNameLocale = genericDisplayNameNodes[0].textContent;\n                } else {\n                    var longDisplayNameNodes = xpath.select('long/standard', zoneNode);\n                    if (longDisplayNameNodes.length > 0) {\n                        tzNameLocale = longDisplayNameNodes[0].textContent;\n                    }\n                }\n            }\n            if (tzNameLocale) {\n                timeZoneDisplayNames[timeZoneId] = timeZoneDisplayNames[timeZoneId] || tzNameLocale;\n            }\n        });\n        return timeZoneDisplayNames;\n    },\n\n    extractTimeZoneFormats: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            timeZoneFormats = {};\n        ['hourFormat', 'gmtFormat', 'gmtZeroFormat', 'regionFormat', 'fallbackFormat', 'fallbackRegionFormat'].forEach(function (tagName) {\n            finder('/ldml/dates/timeZoneNames/' + tagName).forEach(function (node) {\n                var formatName = node.nodeName.replace(/Format$/, ''),\n                    value = node.textContent;\n                if (formatName === 'hour') {\n                    value = value.split(';');\n                }\n                timeZoneFormats[formatName] = timeZoneFormats[formatName] || value;\n            });\n        });\n        finder('/ldml/dates/timeZoneNames/regionFormat[@type]').forEach(function (node) {\n            var type = node.getAttribute('type');\n            timeZoneFormats.regions = timeZoneFormats.regions || {};\n            timeZoneFormats.regions[type] = timeZoneFormats.regions[type] || node.textContent;\n        });\n        return timeZoneFormats;\n    },\n\n    extractTerritoryDisplayNames: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            territoryDisplayNames = {};\n        finder('/ldml/localeDisplayNames/territories/territory').forEach(function (territoryNode) {\n            var territoryId = territoryNode.getAttribute('type');\n            territoryDisplayNames[territoryId] = territoryDisplayNames[territoryId] || territoryNode.textContent;\n        });\n        return territoryDisplayNames;\n    },\n\n    extractCurrencyInfoById: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            currencyDisplayNameByCurrencyId = {},\n            currencyDisplayNameByCurrencyIdAndCount = {},\n            currencySymbolByCurrencyId = {};\n\n        finder('/ldml/numbers/currencies/currency/displayName').forEach(function (displayNameNode) {\n            var currencyId = displayNameNode.parentNode.getAttribute('type'),\n                countAttribute = displayNameNode.getAttribute('count');\n            if (countAttribute) {\n                currencyDisplayNameByCurrencyIdAndCount[currencyId] = currencyDisplayNameByCurrencyIdAndCount[currencyId] || {};\n                currencyDisplayNameByCurrencyIdAndCount[currencyId][countAttribute] = displayNameNode.textContent;\n            } else {\n                currencyDisplayNameByCurrencyId[currencyId] = currencyDisplayNameByCurrencyId[currencyId] || displayNameNode.textContent;\n            }\n        });\n\n        finder('/ldml/numbers/currencies/currency/symbol').forEach(function (symbolNode) {\n            var currencyId = symbolNode.parentNode.getAttribute('type');\n            currencySymbolByCurrencyId[currencyId] = currencySymbolByCurrencyId[currencyId] || symbolNode.textContent;\n        });\n\n        var currencyInfoById = {};\n        Object.keys(currencyDisplayNameByCurrencyId).forEach(function (currencyId) {\n            currencyInfoById[currencyId] = _.extend({\n                displayName: currencyDisplayNameByCurrencyId[currencyId],\n                symbol: currencySymbolByCurrencyId[currencyId]\n            }, currencyDisplayNameByCurrencyIdAndCount[currencyId]);\n        });\n        return currencyInfoById;\n    },\n\n    extractScriptDisplayNames: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            scriptDisplayNames = {};\n        finder('/ldml/localeDisplayNames/scripts/script').forEach(function (scriptNode) {\n            var id = scriptNode.getAttribute('type');\n            scriptDisplayNames[id] = scriptDisplayNames[id] || scriptNode.textContent;\n        });\n        return scriptDisplayNames;\n    },\n\n    extractVariantDisplayNames: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            variantDisplayNames = {};\n        finder('/ldml/localeDisplayNames/variants/variant').forEach(function (variantNode) {\n            var id = variantNode.getAttribute('type');\n            variantDisplayNames[id] = variantDisplayNames[id] || variantNode.textContent;\n        });\n        return variantDisplayNames;\n    },\n\n    extractKeyTypes: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            keyTypes = {};\n        finder('/ldml/localeDisplayNames/keys/key').forEach(function (keyNode) {\n            var type = keyNode.getAttribute('type');\n            keyTypes[type] = { displayName: keyNode.textContent };\n        });\n        finder('/ldml/localeDisplayNames/types/type').forEach(function (typeNode) {\n            var key = typeNode.getAttribute('key'),\n                type = normalizeProperty(typeNode.getAttribute('type'));\n            keyTypes[key] = keyTypes[key] || {};\n            keyTypes[key].types = keyTypes[key].types || {};\n            keyTypes[key].types[type] = typeNode.textContent;\n        });\n        return keyTypes;\n    },\n\n    extractMeasurementSystemNames: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            measurementSystemNames = {};\n        finder('/ldml/localeDisplayNames/measurementSystemNames/measurementSystemName').forEach(function (measurementSystemNameNode) {\n            var id = measurementSystemNameNode.getAttribute('type');\n            measurementSystemNames[id] = measurementSystemNames[id] || measurementSystemNameNode.textContent;\n        });\n        return measurementSystemNames;\n    },\n\n    extractCodePatterns: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            codePatterns = {};\n        finder('/ldml/localeDisplayNames/codePatterns/codePattern').forEach(function (codePatternNode) {\n            var id = codePatternNode.getAttribute('type');\n            codePatterns[id] = codePatterns[id] || codePatternNode.textContent;\n        });\n        return codePatterns;\n    },\n\n    // Calendar extraction methods:\n\n    extractEraNames: function (localeId, calendarId) {\n        calendarId = calendarId || 'gregorian';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            eraNames;\n        ['eraNames', 'eraAbbr'].forEach(function (eraType) {\n            var typeInOutput = {eraNames: 'wide', eraAbbr: 'abbreviated'}[eraType];\n            finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/eras/\" + eraType + '/era').forEach(function (eraNode) {\n                var type = parseInt(eraNode.getAttribute('type'), 10);\n                eraNames = eraNames || {};\n                eraNames[typeInOutput] = eraNames[typeInOutput] || {};\n                eraNames[typeInOutput][type] = eraNames[typeInOutput][type] || eraNode.textContent;\n            });\n        });\n        return convertObjectsWithIntegerKeysToArrays(eraNames);\n    },\n\n    extractQuarterNames: function (localeId, calendarId) {\n        calendarId = calendarId || 'gregorian';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            quarterNames;\n        ['format', 'stand-alone'].forEach(function (quarterContext) {\n            var quarterContextCamelCase = normalizeProperty(quarterContext); // stand-alone => standAlone\n            ['abbreviated', 'narrow', 'wide'].forEach(function (quarterWidth) {\n                finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/quarters/quarterContext[@type='\" + quarterContext + \"']/quarterWidth[@type='\" + quarterWidth + \"']/quarter\").forEach(function (quarterNode) {\n                    var quarterNo = parseInt(quarterNode.getAttribute('type'), 10) - 1;\n\n                    quarterNames = quarterNames || {};\n                    quarterNames[quarterContextCamelCase] = quarterNames[quarterContextCamelCase] || {};\n                    quarterNames[quarterContextCamelCase][quarterWidth] = quarterNames[quarterContextCamelCase][quarterWidth] || {};\n                    quarterNames[quarterContextCamelCase][quarterWidth][quarterNo] = quarterNames[quarterContextCamelCase][quarterWidth][quarterNo] || quarterNode.textContent;\n                });\n            });\n        });\n        return convertObjectsWithIntegerKeysToArrays(quarterNames);\n    },\n\n    extractDayPeriods: function (localeId, calendarId) {\n        calendarId = calendarId || 'gregorian';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            dayPeriods;\n        ['format', 'stand-alone'].forEach(function (dayPeriodContext) {\n            var dayPeriodContextCamelCase = normalizeProperty(dayPeriodContext); // stand-alone => standAlone\n            ['abbreviated', 'narrow', 'wide', 'short'].forEach(function (dayPeriodWidth) {\n                finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/dayPeriods/dayPeriodContext[@type='\" + dayPeriodContext + \"']/dayPeriodWidth[@type='\" + dayPeriodWidth + \"']/dayPeriod\").forEach(function (dayPeriodNode) {\n                    var type = dayPeriodNode.getAttribute('type');\n\n                    dayPeriods = dayPeriods || {};\n                    dayPeriods[dayPeriodContextCamelCase] = dayPeriods[dayPeriodContextCamelCase] || {};\n                    dayPeriods[dayPeriodContextCamelCase][dayPeriodWidth] =\n                        dayPeriods[dayPeriodContextCamelCase][dayPeriodWidth] || {};\n                    dayPeriods[dayPeriodContextCamelCase][dayPeriodWidth][type] =\n                        dayPeriods[dayPeriodContextCamelCase][dayPeriodWidth][type] || dayPeriodNode.textContent;\n                });\n            });\n        });\n        return dayPeriods;\n    },\n\n    extractCyclicNames: function (localeId, calendarId) {\n        calendarId = calendarId || 'gregorian';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            cyclicNames;\n        ['dayParts', 'days', 'months', 'years', 'zodiacs'].forEach(function (cyclicNameSet) {\n            ['format'].forEach(function (cyclicNameContext) {\n                ['abbreviated', 'narrow', 'wide'].forEach(function (cyclicNameWidth) {\n                    finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/cyclicNameSets/cyclicNameSet[@type='\" + cyclicNameSet + \"']/cyclicNameContext[@type='\" + cyclicNameContext + \"']/cyclicNameWidth[@type='\" + cyclicNameWidth + \"']/cyclicName\").forEach(function (cyclicNameNode) {\n                        var type = cyclicNameNode.getAttribute('type');\n                        cyclicNames = cyclicNames || {};\n                        cyclicNames[cyclicNameSet] = cyclicNames[cyclicNameSet] || {};\n                        cyclicNames[cyclicNameSet][cyclicNameContext] = cyclicNames[cyclicNameSet][cyclicNameContext] || {};\n                        cyclicNames[cyclicNameSet][cyclicNameContext][cyclicNameWidth] = cyclicNames[cyclicNameSet][cyclicNameContext][cyclicNameWidth] || {};\n                        cyclicNames[cyclicNameSet][cyclicNameContext][cyclicNameWidth][type] = cyclicNames[cyclicNameSet][cyclicNameContext][cyclicNameWidth][type] || cyclicNameNode.textContent;\n                    });\n                });\n            });\n        });\n        return convertObjectsWithIntegerKeysToArrays(cyclicNames);\n    },\n\n    extractMonthNames: function (localeId, calendarId) {\n        calendarId = calendarId || 'gregorian';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            monthNames;\n        ['format', 'stand-alone'].forEach(function (monthContext) {\n            var monthContextCamelCase = normalizeProperty(monthContext); // stand-alone => standAlone\n            ['abbreviated', 'narrow', 'wide'].forEach(function (monthWidth) {\n                finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/months/monthContext[@type='\" + monthContext + \"']/monthWidth[@type='\" + monthWidth + \"']/month\").forEach(function (monthNode) {\n                    var monthNo = parseInt(monthNode.getAttribute('type'), 10) - 1;\n                    monthNames = monthNames || {};\n                    monthNames[monthContextCamelCase] = monthNames[monthContextCamelCase] || {};\n                    monthNames[monthContextCamelCase][monthWidth] = monthNames[monthContextCamelCase][monthWidth] || {};\n                    monthNames[monthContextCamelCase][monthWidth][monthNo] =\n                        monthNames[monthContextCamelCase][monthWidth][monthNo] || monthNode.textContent;\n                });\n            });\n        });\n        return convertObjectsWithIntegerKeysToArrays(monthNames);\n    },\n\n    extractMonthPatterns: function (localeId, calendarId) {\n        calendarId = calendarId || 'gregorian';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            monthPatterns;\n        ['format', 'numeric', 'stand-alone'].forEach(function (monthPatternContext) {\n            var monthPatternContextCamelCase = normalizeProperty(monthPatternContext); // stand-alone => standAlone\n            ['abbreviated', 'narrow', 'wide', 'all'].forEach(function (monthPatternWidth) {\n                finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/monthPatterns/monthPatternContext[@type='\" + monthPatternContext + \"']/monthPatternWidth[@type='\" + monthPatternWidth + \"']/monthPattern\").forEach(function (monthPatternNode) {\n                    var type = monthPatternNode.getAttribute('type');\n                    monthPatterns = monthPatterns || {};\n                    monthPatterns[monthPatternContextCamelCase] = monthPatterns[monthPatternContextCamelCase] || {};\n                    monthPatterns[monthPatternContextCamelCase][monthPatternWidth] =\n                        monthPatterns[monthPatternContextCamelCase][monthPatternWidth] || {};\n                    monthPatterns[monthPatternContextCamelCase][monthPatternWidth][type] =\n                        monthPatterns[monthPatternContextCamelCase][monthPatternWidth][type] || monthPatternNode.textContent;\n                });\n            });\n        });\n        return monthPatterns;\n    },\n\n    extractDayNames: function (localeId, calendarId) {\n        calendarId = calendarId || 'gregorian';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            dayNoByCldrId = {sun: 0, mon: 1, tue: 2, wed: 3, thu: 4, fri: 5, sat: 6},\n            dayNames;\n        ['format', 'numeric', 'stand-alone'].forEach(function (dayContext) {\n            var dayContextCamelCase = normalizeProperty(dayContext); // stand-alone => standAlone\n            ['abbreviated', 'narrow', 'wide', 'short'].forEach(function (dayWidth) {\n                finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/days/dayContext[@type='\" + dayContext + \"']/dayWidth[@type='\" + dayWidth + \"']/day\").forEach(function (dayNode) {\n                    var dayNo = dayNoByCldrId[dayNode.getAttribute('type')];\n                    dayNames = dayNames || {};\n                    dayNames[dayContextCamelCase] = dayNames[dayContextCamelCase] || {};\n                    dayNames[dayContextCamelCase][dayWidth] = dayNames[dayContextCamelCase][dayWidth] || {};\n                    dayNames[dayContextCamelCase][dayWidth][dayNo] = dayNames[dayContextCamelCase][dayWidth][dayNo] || dayNode.textContent;\n                });\n            });\n        });\n        return convertObjectsWithIntegerKeysToArrays(dayNames);\n    },\n\n    extractFields: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            fields;\n        finder('/ldml/dates/fields/field/displayName').forEach(function (fieldDisplayNameNode) {\n            var fieldName = fieldDisplayNameNode.parentNode.getAttribute('type');\n            fields = fields || {};\n            fields[fieldName] = fields[fieldName] || {};\n            fields[fieldName].displayName = fields[fieldName].displayName || fieldDisplayNameNode.textContent;\n        });\n\n        finder('/ldml/dates/fields/field/relative').forEach(function (fieldRelativeNode) {\n            var fieldName = fieldRelativeNode.parentNode.getAttribute('type'),\n                type = fieldRelativeNode.getAttribute('type');\n            fields = fields || {};\n            fields[fieldName] = fields[fieldName] || {};\n            fields[fieldName].relative = fields[fieldName].relative || {};\n            fields[fieldName].relative[type] = fields[fieldName].relative[type] || fieldRelativeNode.textContent;\n        });\n\n        finder('/ldml/dates/fields/field/relativeTime/relativeTimePattern').forEach(function (relativeTimePatternNode) {\n            var relativeTimeNode = relativeTimePatternNode.parentNode,\n                fieldName = relativeTimeNode.parentNode.getAttribute('type'),\n                type = relativeTimeNode.getAttribute('type'),\n                count = relativeTimePatternNode.getAttribute('count');\n            fields = fields || {};\n            fields[fieldName] = fields[fieldName] || {};\n            fields[fieldName].relativeTime = fields[fieldName].relativeTime || {};\n            fields[fieldName].relativeTime[type] = fields[fieldName].relativeTime[type] || {};\n            fields[fieldName].relativeTime[type][count] = fields[fieldName].relativeTime[type][count] || relativeTimePatternNode.textContent;\n        });\n        return fields;\n    },\n\n    extractDateTimePatterns: function (localeId, calendarId) {\n        calendarId = calendarId || 'gregorian';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            dateTimePatterns;\n        finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/dateTimeFormats/dateTimeFormatLength/dateTimeFormat\").forEach(function (dateTimeFormatNode) {\n            var dateTimeFormatLengthType = dateTimeFormatNode.parentNode.getAttribute('type'),\n                patternNodes = xpath.select('pattern', dateTimeFormatNode);\n            if (patternNodes.length !== 1) {\n                throw new Error('Expected exactly one pattern in dateTimeFormatNode');\n            }\n            dateTimePatterns = dateTimePatterns || {};\n            dateTimePatterns[dateTimeFormatLengthType] = dateTimePatterns[dateTimeFormatLengthType] || patternNodes[0].textContent;\n        });\n        return dateTimePatterns;\n    },\n\n    extractDateOrTimeFormats: function (localeId, calendarId, dateOrTime) {\n        calendarId = calendarId || 'gregorian';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            formats;\n        finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/\" + dateOrTime + 'Formats/' + dateOrTime + 'FormatLength/' + dateOrTime + 'Format/*').forEach(function (patternNode) {\n            var type = patternNode.parentNode.parentNode.getAttribute('type');\n            formats = formats || {};\n            formats[type] = formats[type] || patternNode.textContent;\n        });\n        return formats;\n    },\n\n    extractDateFormats: function (localeId, calendarId) {\n        return this.extractDateOrTimeFormats(localeId, calendarId, 'date');\n    },\n\n    extractTimeFormats: function (localeId, calendarId) {\n        return this.extractDateOrTimeFormats(localeId, calendarId, 'time');\n    },\n\n    extractDateFormatItems: function (localeId, calendarId) {\n        calendarId = calendarId || 'gregorian';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            dateFormatItems;\n        finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/dateTimeFormats/availableFormats/dateFormatItem\").forEach(function (dateFormatItemNode) {\n            var id = dateFormatItemNode.getAttribute('id');\n            dateFormatItems = dateFormatItems || {};\n            dateFormatItems[id] = dateFormatItems[id] || dateFormatItemNode.textContent;\n        });\n        return dateFormatItems;\n    },\n\n    extractDateIntervalFormats: function (localeId, calendarId) {\n        calendarId = calendarId || 'gregorian';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            dateIntervalFormats;\n        finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/dateTimeFormats/intervalFormats/intervalFormatItem\").forEach(function (intervalFormatItemNode) {\n            var dateIntervalFormat = {};\n            for (var i = 0 ; i < intervalFormatItemNode.childNodes.length ; i += 1) {\n                var greatestDifferenceNode = intervalFormatItemNode.childNodes[i];\n                if (greatestDifferenceNode.nodeType !== 1) {\n                    // Skip whitespace node\n                    continue;\n                }\n                var greatestDifferenceIdAttribute = greatestDifferenceNode.getAttribute('id');\n                var greatestDifferenceId = greatestDifferenceIdAttribute;\n                dateIntervalFormat[greatestDifferenceId] = dateIntervalFormat[greatestDifferenceId] || greatestDifferenceNode.textContent;\n            }\n            var id = intervalFormatItemNode.getAttribute('id');\n            dateIntervalFormats = dateIntervalFormats || {};\n            dateIntervalFormats[id] = dateIntervalFormats[id] || dateIntervalFormat;\n        });\n        return dateIntervalFormats;\n    },\n\n    extractDateIntervalFallbackFormat: function (localeId, calendarId) {\n        calendarId = calendarId || 'gregorian';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            dateIntervalFallbackFormat;\n        finder(\"/ldml/dates/calendars/calendar[@type='\" + calendarId + \"']/dateTimeFormats/intervalFormats/intervalFormatFallback\").forEach(function (intervalFormatFallbackNode) {\n            dateIntervalFallbackFormat = dateIntervalFallbackFormat || intervalFormatFallbackNode.textContent;\n        });\n        return dateIntervalFallbackFormat;\n    },\n\n    // Number extraction code:\n\n    extractNumberSymbols: function (localeId, numberSystemId) {\n        numberSystemId = numberSystemId || 'latn';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            numberSymbols;\n        finder(\"/ldml/numbers/symbols[@numberSystem = '\" + numberSystemId + \"']/*[name() != 'alias']\").concat(finder(\"/ldml/numbers/symbols/*[name() != 'alias']\")).forEach(function (numberSymbolNode) {\n            var symbolId = numberSymbolNode.nodeName;\n            numberSymbols = numberSymbols || {};\n            numberSymbols[symbolId] = numberSymbols[symbolId] || numberSymbolNode.textContent;\n        });\n        return numberSymbols;\n    },\n\n    extractNumberFormats: function (localeId, numberSystemId) {\n        numberSystemId = numberSystemId || 'latn';\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            numberFormats;\n        ['scientific', 'decimal', 'currency', 'percent'].forEach(function (formatType) {\n            ['full', 'long', 'medium', 'short'].forEach(function (length) {\n                finder('/ldml/numbers/' + formatType + \"Formats[@numberSystem = '\" + numberSystemId + \"']/\" + formatType + \"FormatLength[@type='\" + length + \"']/\" + formatType + 'Format/pattern').forEach(function (patternNode) {\n                    var type = patternNode.getAttribute('type'),\n                        count = patternNode.getAttribute('count');\n                    numberFormats = numberFormats || {};\n                    numberFormats[formatType] = numberFormats[formatType] || {};\n                    numberFormats[formatType][length] = numberFormats[formatType][length] || {};\n                    numberFormats[formatType][length][type] = numberFormats[formatType][length][type] || {};\n                    numberFormats[formatType][length][type][count] = numberFormats[formatType][length][type][count] || patternNode.textContent;\n                });\n            });\n            finder('/ldml/numbers/' + formatType + \"Formats[@numberSystem = '\" + numberSystemId + \"']/\" + formatType + 'FormatLength[not(@type)]/' + formatType + 'Format/pattern').forEach(function (patternNode) {\n                numberFormats = numberFormats || {};\n                numberFormats[formatType] = numberFormats[formatType] || {};\n                numberFormats[formatType].default = numberFormats[formatType].default || patternNode.textContent;\n            });\n            finder('/ldml/numbers/' + formatType + \"Formats[@numberSystem = '\" + numberSystemId + \"']/unitPattern\").forEach(function (unitPatternNode) {\n                var count = unitPatternNode.getAttribute('count');\n                numberFormats = numberFormats || {};\n                numberFormats[formatType] = numberFormats[formatType] || {};\n                numberFormats[formatType][count] = numberFormats[formatType][count] || unitPatternNode.textContent;\n            });\n        });\n\n        finder(\"/ldml/numbers/currencyFormats[@numberSystem = '\" + numberSystemId + \"']/currencySpacing\").forEach(function (currencySpacingNode) {\n            numberFormats = numberFormats || {};\n            numberFormats.currency = numberFormats.currency || {};\n            numberFormats.currency.currencySpacing = numberFormats.currency.currencySpacing || {};\n\n            ['before', 'after'].forEach(function (place) {\n                var placeData = numberFormats.currency.currencySpacing[place + 'Currency'] = numberFormats.currency.currencySpacing[place + 'Currency'] || {};\n\n                ['currencyMatch', 'surroundingMatch', 'insertBetween'].forEach(function (spacingPropertyName) {\n                    var match = xpath.select(place + 'Currency/' + spacingPropertyName, currencySpacingNode);\n                    if (match.length > 0) {\n                        numberFormats.currency.currencySpacing[place + 'Currency'][spacingPropertyName] = match[0].textContent;\n                    }\n                });\n\n                ['currencyMatch', 'surroundingMatch'].forEach(function (spacingPropertyName) {\n                    if (placeData[spacingPropertyName]) {\n                        placeData[spacingPropertyName] = unicoderegexp.expandCldrUnicodeSetIdToCharacterClass(placeData[spacingPropertyName]);\n                    }\n                });\n            });\n        });\n\n        return numberFormats;\n    },\n\n    extractDefaultNumberSystemId: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            defaultNumberSystemId;\n        finder('/ldml/numbers/defaultNumberingSystem').forEach(function (defaultNumberingSystemNode) {\n            defaultNumberSystemId = defaultNumberSystemId || defaultNumberingSystemNode.textContent;\n        });\n        return defaultNumberSystemId;\n    },\n\n    extractUnitPatterns: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            unitPatterns = {};\n        finder('/ldml/units/unitLength/unit/unitPattern').forEach(function (unitPatternNode) {\n            var unitNode = unitPatternNode.parentNode,\n                unitLength = unitNode.parentNode.getAttribute('type'),\n                unitId = normalizeProperty(unitNode.getAttribute('type'));\n            unitPatterns[unitLength] = unitPatterns[unitLength] || {};\n            unitPatterns[unitLength].unit = unitPatterns[unitLength].unit || {};\n            unitPatterns[unitLength].unit[unitId] = unitPatterns[unitLength].unit[unitId] || {};\n            var count = unitPatternNode.getAttribute('count');\n            unitPatterns[unitLength].unit[unitId][count] = unitPatterns[unitLength].unit[unitId][count] || unitPatternNode.textContent;\n        });\n        finder('/ldml/units/unitLength/compoundUnit/compoundUnitPattern').forEach(function (compoundUnitPatternNode) {\n            var compoundUnitNode = compoundUnitPatternNode.parentNode,\n                unitLength = compoundUnitNode.parentNode.getAttribute('type'),\n                compoundUnitId = compoundUnitNode.getAttribute('type');\n\n            unitPatterns[unitLength].compoundUnit = unitPatterns[unitLength].compoundUnit || {};\n            unitPatterns[unitLength].compoundUnit[compoundUnitId] = compoundUnitPatternNode.textContent;\n        });\n        return unitPatterns;\n    },\n\n    extractDelimiters: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            delimiters = {};\n        finder('/ldml/delimiters/*').forEach(function (delimiterNode) {\n            var type = delimiterNode.nodeName;\n            delimiters[type] = delimiters[type] || delimiterNode.textContent;\n        });\n        return delimiters;\n    },\n\n    extractListPatterns: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            listPatterns = {};\n        finder('/ldml/listPatterns/listPattern/listPatternPart').forEach(function (listPatternPartNode) {\n            var listPatternTypeAttribute = listPatternPartNode.parentNode.getAttribute('type'),\n                type = listPatternTypeAttribute ? normalizeProperty(listPatternTypeAttribute) : 'default',\n                part = listPatternPartNode.getAttribute('type');\n            listPatterns[type] = listPatterns[type] || {};\n            listPatterns[type][part] = listPatterns[type][part] || listPatternPartNode.textContent;\n        });\n        return listPatterns;\n    },\n\n    extractCharacters: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            characters = {\n                exemplar: {},\n                ellipsis: {}\n            };\n        finder('/ldml/characters/exemplarCharacters').forEach(function (exemplarCharactersNode) {\n            var typeAttr = exemplarCharactersNode.getAttribute('type'),\n                type = typeAttr || 'default';\n            characters.exemplar[type] = characters.exemplar[type] || exemplarCharactersNode.textContent.replace(/^\\[|\\]$/g, '').split(' ');\n        });\n        finder('/ldml/characters/ellipsis').forEach(function (ellipsisNode) {\n            var type = ellipsisNode.getAttribute('type');\n            characters.ellipsis[type] = characters.ellipsis[type] || ellipsisNode.textContent;\n        });\n        finder('/ldml/characters/moreInformation').forEach(function (moreInformationNode) {\n            characters.moreInformation = characters.moreInformation || moreInformationNode.textContent;\n        });\n        return characters;\n    },\n\n    _extractPluralRuleAst: function (localeId, cardinalOrOrdinal) {\n        var that = this,\n            document = that.getDocument(Path.resolve(that.cldrPath, 'common', 'supplemental', cardinalOrOrdinal === 'ordinal' ? 'ordinals.xml' : 'plurals.xml')),\n            subLocaleIds = that.expandLocaleIdToPrioritizedList(localeId),\n            statementAsts = [];\n        for (var i = 0 ; i < subLocaleIds.length ; i += 1) {\n            var subLocaleId = subLocaleIds[i],\n                matchLocalesXPathExpr =\n                    \"@locales = '\" + subLocaleId + \"' or \" +\n                    \"starts-with(@locales, '\" + subLocaleId + \"') or \" +\n                    \"contains(@locales, ' \" + subLocaleId + \" ') or \" +\n                    \"substring(@locales, string-length(@locales) - string-length(' \" + subLocaleId + \"') + 1) = ' \" + subLocaleId + \"'\",\n                pluralRulesNodes = xpath.select('/supplementalData/plurals/pluralRules[' + matchLocalesXPathExpr + ']', document),\n                cldrPluralRuleSet = new CldrPluralRuleSet();\n            if (pluralRulesNodes.length > 0) {\n                xpath.select('pluralRule', pluralRulesNodes[0]).forEach(function (pluralRuleNode) {\n                    cldrPluralRuleSet.addRule(pluralRuleNode.textContent, pluralRuleNode.getAttribute('count'));\n                });\n                statementAsts = cldrPluralRuleSet.toJavaScriptFunctionBodyAst();\n                break;\n            }\n        }\n        return statementAsts;\n    },\n\n    extractPluralRuleFunction: function (localeId, cardinalOrOrdinal) {\n        return new Function('n', uglifyJs.uglify.gen_code(['toplevel', this._extractPluralRuleAst(localeId, cardinalOrOrdinal)]));\n    },\n\n    // 'types' is optional, defaults to all available\n    extractRbnfFunctionByType: function (localeId, types) {\n        var cardinalPluralRuleAst = this._extractPluralRuleAst(localeId, 'cardinal');\n        var ordinalPluralRuleAst = this._extractPluralRuleAst(localeId, 'ordinal');\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'rbnf')),\n            cldrRbnfRuleSetByType = {};\n        finder('/ldml/rbnf/rulesetGrouping/ruleset/rbnfrule').forEach(function (rbnfRuleNode) {\n            var type = CldrRbnfRuleSet.getSafeRendererName(rbnfRuleNode.parentNode.getAttribute('type')),\n                value = rbnfRuleNode.getAttribute('value');\n            cldrRbnfRuleSetByType[type] = cldrRbnfRuleSetByType[type] || new CldrRbnfRuleSet({\n                type: type,\n                cardinalPluralRuleAst: cardinalPluralRuleAst,\n                ordinalPluralRuleAst: ordinalPluralRuleAst\n            });\n            if (!cldrRbnfRuleSetByType[type].ruleByValue[value]) {\n                var radixAttribute = rbnfRuleNode.getAttribute('radix');\n                cldrRbnfRuleSetByType[type].ruleByValue[value] = {\n                    value: value,\n                    rbnf: rbnfRuleNode.textContent.replace(/;$/, '').replace(/←/g, '<').replace(/→/g, '>'),\n                    radix: radixAttribute\n                };\n            }\n        });\n        var isAddedByType = {},\n            typesToAdd = types ? [].concat(types) : Object.keys(cldrRbnfRuleSetByType),\n            rbnfFunctionByType = {\n                renderNumber: String // Provide a (bad) default number rendering implementation to avoid #13\n            };\n        while (typesToAdd.length > 0) {\n            var type = typesToAdd.shift();\n            if (!(type in isAddedByType)) {\n                isAddedByType[type] = true;\n                var cldrRbnfRuleSet = cldrRbnfRuleSetByType[type];\n                // Some rules aren't available in some locales (such as spellout-cardinal-financial).\n                // The easiest thing is just to skip the missing ones here, even though it can produce\n                // some broken function sets:\n                if (cldrRbnfRuleSet) {\n                    var result = cldrRbnfRuleSet.toFunctionAst();\n\n                    rbnfFunctionByType[type] = new Function('n', uglifyJs.uglify.gen_code(['toplevel', result.functionAst[3]]));\n                    Array.prototype.push.apply(typesToAdd, result.dependencies);\n                }\n            }\n        }\n        return rbnfFunctionByType;\n    },\n\n    extractDigitsByNumberSystemId: function () {\n        var document = this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'numberingSystems.xml')),\n            digitsByNumberSystemId = {};\n\n        xpath.select('/supplementalData/numberingSystems/numberingSystem', document).forEach(function (numberingSystemNode) {\n            var numberSystemId = numberingSystemNode.getAttribute('id');\n            if (numberingSystemNode.getAttribute('type') === 'numeric') {\n                digitsByNumberSystemId[numberSystemId] = numberingSystemNode.getAttribute('digits').split(/(?:)/);\n            } else {\n                // type='algorithmic'\n                var rulesAttributeFragments = numberingSystemNode.getAttribute('rules').split('/'),\n                    ruleType = CldrRbnfRuleSet.getSafeRendererName(rulesAttributeFragments[rulesAttributeFragments.length - 1]);\n                digitsByNumberSystemId[numberSystemId] = ruleType; // A string value means \"use this rbnf renderer for the digits\"\n            }\n        }, this);\n        return digitsByNumberSystemId;\n    },\n\n    extractLayout: function (localeId) {\n        var finder = this.createFinder(this.getPrioritizedDocumentsForLocale(localeId, 'main')),\n            layout = {};\n        finder('/ldml/layout/*/*').forEach(function (leafNode) {\n            var type = leafNode.nodeName,\n                parentType = leafNode.parentNode.nodeName;\n            layout[parentType] = layout[parentType] || {};\n            layout[parentType][type] = layout[parentType][type] || leafNode.textContent;\n        });\n        return layout;\n    },\n\n    extractTerritories: function () {\n        var finder = this.createFinder([this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'supplementalData.xml'))]);\n\n        var territoryInfoByTerritoryId = {};\n        finder('/supplementalData/codeMappings/territoryCodes').forEach(function (territoryCodeNode) {\n            var type = territoryCodeNode.getAttribute('type');\n            var numericCode = territoryCodeNode.getAttribute('numeric');\n            var alpha3Code = territoryCodeNode.getAttribute('alpha3');\n\n            var countryInfo = {\n                alpha2Code: type // ISO 3166-1 alpha-2\n            };\n\n            if (alpha3Code) {\n                // ISO 3166-1 alpha-3\n                countryInfo.alpha3Code = alpha3Code;\n            }\n\n            if (numericCode) {\n                // UN M.49 / ISO-3166-1 numeric-3\n                // A numeric code may be reused by another country, e.g. Zaire and the DRC both have numeric code 180, but only the DRC currently exists\n                // Entries without a numeric code are few, which are usually exceptional reservations in ISO 3166-1 alpha-2. Example: IC, Canary Islands\n                countryInfo.numericCode = numericCode;\n            }\n\n            territoryInfoByTerritoryId[type] = countryInfo;\n        });\n\n        return territoryInfoByTerritoryId;\n    },\n\n    extractTerritoryContainmentGroups: function () {\n        var finder = this.createFinder([this.getDocument(Path.resolve(this.cldrPath, 'common', 'supplemental', 'supplementalData.xml'))]);\n\n        var territoryContainmentGroups = {};\n\n        var isSeenByType = {};\n        var parentRegionIdByType = {};\n\n        finder('/supplementalData/territoryContainment/group').forEach(function (groupNode) {\n            var type = groupNode.getAttribute('type');\n            var contains = groupNode.getAttribute('contains').split(' ');\n\n            if (!isSeenByType[type]) { // Only look at the first occurence of a 'type', the first one overrides any items after it with the same type\n                isSeenByType[type] = true;\n\n                territoryContainmentGroups[type] = {\n                    type: type,\n                    contains: contains\n                };\n\n                contains.forEach(function (id) {\n                    parentRegionIdByType[id] = type;\n                });\n            }\n        });\n\n        Object.keys(territoryContainmentGroups).forEach(function (type) {\n            // Territory containment groups that are not themselves somehow linked to the root world group '001', are not exposed because they're not part of the tree structure\n            if (!(type in parentRegionIdByType)) {\n                if (type !== '001') {\n                    delete territoryContainmentGroups[type];\n                }\n            } else {\n                territoryContainmentGroups[type].parent = parentRegionIdByType[type];\n            }\n        });\n\n        return territoryContainmentGroups;\n    }\n};\n\nmodule.exports = new Cldr(Path.resolve(__dirname, '../3rdparty/cldr/'));\nmodule.exports.load = function (cldrPath) {\n    return new Cldr(cldrPath);\n};\n","/home/travis/build/npmtest/node-npmtest-cldr/node_modules/cldr/lib/normalizeLocaleId.js":"/*\n * Replace - with _ and convert to lower case: en-GB => en_gb\n */\nmodule.exports = function normalizeLocaleId(localeId) {\n    return localeId && localeId.replace(/-/g, '_').toLowerCase();\n};\n","/home/travis/build/npmtest/node-npmtest-cldr/node_modules/cldr/lib/normalizeProperty.js":"/*\n * Convert foo-bar attribute values to fooBar JavaScript keys\n */\nmodule.exports = function normalizeProperty(str) {\n    return str.replace(/-([a-z])/g, function ($0, ch) {\n        return ch.toUpperCase();\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-cldr/node_modules/cldr/lib/convertObjectsWithIntegerKeysToArrays.js":"// Convert objects with all integer keys starting from 0 to arrays and remove undefined values:\nmodule.exports = function convertObjectsWithIntegerKeysToArrays(obj) {\n    if (Array.isArray(obj)) {\n        return obj.map(convertObjectsWithIntegerKeysToArrays);\n    } else if (typeof obj === 'object' && obj !== null) {\n        var keys = Object.keys(obj);\n        if (0 in obj || 1 in obj) {\n            var firstNumericKeyNumber = 0 in obj ? 0 : 1,\n                nextNumericKeyNumber = firstNumericKeyNumber + 1;\n            while (nextNumericKeyNumber in obj) {\n                nextNumericKeyNumber += 1;\n            }\n            if (keys.length > 0 && nextNumericKeyNumber === keys.length + firstNumericKeyNumber) {\n                var array = [],\n                    i;\n                for (i = 0 ; i < firstNumericKeyNumber ; i += 1) {\n                    array.push(undefined);\n                }\n                for (i = firstNumericKeyNumber ; i < keys.length ; i += 1) {\n                    array.push(convertObjectsWithIntegerKeysToArrays(obj[i]));\n                }\n                return array;\n            }\n        }\n        var resultObj = {};\n        keys.forEach(function (key) {\n            if (typeof obj[key] !== 'undefined') {\n                resultObj[key] = convertObjectsWithIntegerKeysToArrays(obj[key]);\n            }\n        });\n        return resultObj;\n    } else {\n        return obj;\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-cldr/node_modules/cldr/lib/CldrPluralRuleSet.js":"var CldrPluralRule = require('./CldrPluralRule'),\n    cldrPluralRuleTermFunctionByName = require('./cldrPluralRuleTermFunctionByName'),\n    uglifyJs = require('uglify-js');\n\nfunction CldrPluralRuleSet() {\n    this.cldrPluralRuleByCount = {};\n}\n\nCldrPluralRuleSet.prototype = {\n    addRule: function (cldrPluralRule, count) {\n        if (typeof cldrPluralRule === 'string') {\n            cldrPluralRule = cldrPluralRule.replace(/\\s*@(?:decimal|integer).*$/, '');\n            // Some count=\"other\" nodes in CLDR 24+ consist purely of sample text.\n            // Don't add those.\n            if (cldrPluralRule.length === 0) {\n                return;\n            }\n            cldrPluralRule = new CldrPluralRule(cldrPluralRule);\n        }\n        this.cldrPluralRuleByCount[count] = cldrPluralRule;\n    },\n\n    toJavaScriptFunctionBodyAst: function () {\n        var statementAsts = [],\n            isUsedByTerm = {};\n        Object.keys(this.cldrPluralRuleByCount).forEach(function (count) {\n            var cldrPluralRule = this.cldrPluralRuleByCount[count];\n            cldrPluralRule.updateIsUsedByTerm(isUsedByTerm);\n            statementAsts.push(\n                [\n                    'if',\n                    cldrPluralRule.toJavaScriptAst(),\n                    ['return', ['string', count]]\n                ]\n            );\n        }, this);\n        statementAsts.push(['return', ['string', 'other']]);\n        var varAsts = [];\n\n        ['i', 'v', 'w', 'f', 't'].forEach(function (term) {\n            if (isUsedByTerm[term]) {\n                varAsts.push([term, uglifyJs.parser.parse(cldrPluralRuleTermFunctionByName[term].toString())[1][0][3][0][1]]);\n            }\n        });\n\n        if (Object.keys(isUsedByTerm).length !== 0) {\n            statementAsts.unshift(\n                // if (typeof n === 'string') n = parseInt(n, 10);\n                [ 'if',\n                    [ 'binary',\n                        '===',\n                        [ 'unary-prefix', 'typeof', [ 'name', 'n' ] ],\n                        [ 'string', 'string' ] ],\n                    [ 'stat',\n                        [ 'assign',\n                            true,\n                          [ 'name', 'n' ],\n                            [ 'call',\n                            [ 'name', 'parseInt' ],\n                            [ [ 'name', 'n' ], [ 'num', 10 ] ] ] ] ],\n                    undefined ]\n            );\n        }\n\n        if (varAsts.length > 0) {\n            statementAsts.unshift(['var', varAsts]);\n        }\n        return statementAsts;\n    }\n};\n\nmodule.exports = CldrPluralRuleSet;\n","/home/travis/build/npmtest/node-npmtest-cldr/node_modules/cldr/lib/CldrPluralRule.js":"var fs = require('fs'),\n    Path = require('path'),\n    PEG = require('pegjs'),\n    parser = PEG.buildParser(fs.readFileSync(Path.resolve(__dirname, 'cldrPluralRule.pegjs'), 'utf-8'));\n\nfunction rangeListToJavaScriptAst(rangeListNode, lhsJavaScriptAst, withinSemantics) {\n    var javaScriptAst,\n        seenRange = false;\n    for (var i = rangeListNode.ranges.length - 1 ; i >= 0 ; i -= 1) {\n        var range = rangeListNode.ranges[i],\n            itemJavaScriptAst;\n        if (range.type === 'number') {\n            itemJavaScriptAst = ['binary', '===', lhsJavaScriptAst, ['num', range.value]];\n        } else {\n            // range.type === 'range'\n            seenRange = true;\n            itemJavaScriptAst = ['binary', '&&', ['binary', '>=', lhsJavaScriptAst, ['num', range.min.value]],\n                                                 ['binary', '<=', lhsJavaScriptAst, ['num', range.max.value]]];\n        }\n        if (javaScriptAst) {\n            javaScriptAst = ['binary', '||', itemJavaScriptAst, javaScriptAst];\n        } else {\n            javaScriptAst = itemJavaScriptAst;\n        }\n    }\n    if (seenRange && !withinSemantics) {\n        javaScriptAst = ['binary', '&&', ['binary', '===', lhsJavaScriptAst,\n                                                           ['call', ['dot', ['name', 'Math'], 'floor'], [lhsJavaScriptAst]]],\n            javaScriptAst];\n    }\n    return javaScriptAst;\n}\n\nfunction nodeToJavaScriptAst(node) {\n    switch (node.type) {\n    case 'number':\n        return ['num', node.value];\n    case 'n':\n    case 'i':\n    case 'v':\n    case 'w':\n    case 'f':\n    case 't':\n        return ['name', node.type];\n    case 'is':\n        return ['binary', '==='].concat(node.operands.map(nodeToJavaScriptAst));\n    case 'isnot':\n        return ['binary', '!=='].concat(node.operands.map(nodeToJavaScriptAst));\n    case 'mod':\n        return ['binary', '%'].concat(node.operands.map(nodeToJavaScriptAst));\n    case 'and':\n        return ['binary', '&&'].concat(node.operands.map(nodeToJavaScriptAst));\n    case 'or':\n        return ['binary', '||'].concat(node.operands.map(nodeToJavaScriptAst));\n    case 'not':\n        return ['unary-prefix', '!', nodeToJavaScriptAst(node.operands)];\n    case 'isnot':\n        return ['binary', '!=='].concat(node.operands.map(nodeToJavaScriptAst));\n    case 'within':\n        return rangeListToJavaScriptAst(node.operands[1], nodeToJavaScriptAst(node.operands[0]), true);\n    case 'notwithin':\n        return ['unary-prefix', '!', rangeListToJavaScriptAst(node.operands[1], nodeToJavaScriptAst(node.operands[0]), true)];\n    case 'in':\n        return rangeListToJavaScriptAst(node.operands[1], nodeToJavaScriptAst(node.operands[0]), false);\n    case 'notin':\n        return ['unary-prefix', '!', rangeListToJavaScriptAst(node.operands[1], nodeToJavaScriptAst(node.operands[0]), false)];\n    default:\n        throw new Error('nodeToJavaScriptAst: Unknown node type: ' + node.type);\n    }\n}\n\nfunction traverse(node, lambda) {\n    lambda(node);\n    if (node.operands) {\n        node.operands.forEach(function (operand) {\n            traverse(operand, lambda);\n        });\n    }\n}\n\nfunction CldrPluralRule(src) {\n    this.topLevelNode = parser.parse(src.replace(/^\\s+|\\s+$/g, '').replace(/\\s{2,}/g, ' '));\n}\n\nCldrPluralRule.prototype = {\n    toJavaScriptAst: function () {\n        return nodeToJavaScriptAst(this.topLevelNode);\n    },\n\n    eachNode: function (lambda) {\n        traverse(this.topLevelNode, lambda);\n    },\n\n    updateIsUsedByTerm: function (isUsedByTerm) {\n        this.eachNode(function (node) {\n            if (['i', 'v', 'w', 'f', 't', 'n'].indexOf(node.type) !== -1) {\n                isUsedByTerm[node.type] = true;\n            }\n        });\n        return isUsedByTerm;\n    }\n};\n\nmodule.exports = CldrPluralRule;\n","/home/travis/build/npmtest/node-npmtest-cldr/node_modules/cldr/lib/cldrPluralRuleTermFunctionByName.js":"exports.i = function i(n) {\n    return Math.floor(Math.abs(n));\n};\n\nexports.v = function v(n) {\n    return n.toString().replace(/^[^.]*\\.?/, '').length;\n};\n\nexports.w = function w(n) {\n    return n.toString().replace(/^[^.]*\\.?|0+$/g, '').length;\n};\n\nexports.f = function f(n) {\n    return parseInt(n.toString().replace(/^[^.]*\\.?/, ''), 10) || 0;\n};\n\nexports.t = function t(n) {\n    return parseInt(n.toString().replace(/^[^.]*\\.?|0+$/g, ''), 10) || 0;\n};\n","/home/travis/build/npmtest/node-npmtest-cldr/node_modules/cldr/lib/CldrRbnfRuleSet.js":"var _ = require('underscore');\n\nfunction CldrRbnfRuleSet(config) {\n    _.extend(this, config);\n    this.ruleByValue = {};\n}\n\nCldrRbnfRuleSet.getSafeRendererName = function (rendererName) {\n    return (\n        ('render-' + rendererName)\n        .replace(/[^\\w-]/g, '-')\n        .replace(/[-_]+([0-9a-z])/gi, function ($0, ch) {\n            return ch.toUpperCase();\n        })\n        .replace('GREEKNUMERALMAJUSCULES', 'GreekNumeralMajuscules')\n    );\n};\n\nCldrRbnfRuleSet.prototype = {\n    toFunctionAst: function () {\n        var that = this,\n            isSeenByRuleSetType = {};\n\n        function ruleToExpressionAst(rule) {\n            var expressionAsts = [],\n                rbnf = rule.rbnf;\n\n            // \"If a rule body begins with an apostrophe, the apostrophe is ignored, but all text after it becomes\n            // significant (this is how you can have a rule's rule text begin with whitespace).\"\n            // -- http://www.icu-project.org/apiref/icu4c/classRuleBasedNumberFormat.html\n            rbnf = rbnf.replace(/^'/, '');\n\n            rule.radix = rule.radix || 10;\n\n            function getDivisor() {\n                var divisor = 1;\n                while (10 * divisor <= parseInt(rule.value, 10)) { // Inefficient, but won't suffer from Math.log rounding errors\n                    divisor *= 10;\n                }\n                return divisor;\n            }\n\n            // Replace is used for tokenization, the return value isn't used:\n            rbnf.replace(/(?:([\\<\\>\\=])(?:(%%?[\\w\\-]+)|([#,0.]+))?\\1)|(?:\\[([^\\]]+)\\])|([\\x7f-\\uffff:'\\.\\s\\w\\d\\-]+|(?:\\$\\((cardinal|ordinal),([^\\)]+)\\)))/gi, function ($0, specialChar, otherFormat, decimalFormat, optional, literal, cardinalOrOrdinal, dollarRule) {\n                // The meanings of the substitution token characters are as follows:\n                if (dollarRule) {\n                    var callAst = ['call', ['function', null, [ 'n' ], cardinalOrOrdinal === 'cardinal' ? that.cardinalPluralRuleAst : that.ordinalPluralRuleAst], [ [ 'name', 'n' ] ] ];\n                    var objAst = ['object', [] ];\n                    dollarRule.split('}').forEach(function (fragment) {\n                        var pluralCaseAndValue = fragment.split('{');\n                        if (pluralCaseAndValue.length === 2) {\n                            objAst[1].push([pluralCaseAndValue[0], ['string', pluralCaseAndValue[1]]]);\n                        }\n                    });\n                    expressionAsts.push(['sub', objAst, callAst]);\n                } else if (specialChar) {\n                    var expr;\n                    if (specialChar === '<') { // <<\n                        if (/^\\d+$/.test(rule.value)) {\n                            // In normal rule: Divide the number by the rule's divisor and format the quotient\n                            expr = ['call', ['dot', ['name', 'Math'], 'floor'], [['binary', '/', ['name', 'n'], ['num', getDivisor()]]]];\n                        } else if (rule.value === '-x') {\n                            throw new Error('<< not allowed in negative number rule');\n                        } else {\n                            // In fraction or master rule: Isolate the number's integral part and format it.\n                            expr = ['call', ['dot', ['name', 'Math'], 'floor'], [['name', 'n']]];\n                        }\n                    } else if (specialChar === '>') { // >>\n                        if (/\\./.test(rule.value)) {\n                            // Fraction or master rule => parseInt(String(n).replace(/\\d*\\./, ''), 10)\n                            expr = ['call', ['name', 'parseInt'], [['call', ['dot', ['call', ['name', 'String'], [['name', 'n']]], 'replace'], [['regexp', '\\\\d*\\\\.', ''], ['string', '']]], ['num', 10]]];\n                        } else if (rule.value === '-x') {\n                            expr = ['unary-prefix', '-', ['name', 'n']];\n                        } else {\n                            expr = ['binary', '%', ['name', 'n'], ['num', getDivisor()]];\n                        }\n                    } else if (specialChar === '=') { // ==\n                        expr = ['name', 'n'];\n                    }\n                    // FIXME: >>> not supported\n\n                    // The substitution descriptor (i.e., the text between the token characters) may take one of three forms:\n                    if (otherFormat) {\n                        // A rule set name:\n                        // Perform the mathematical operation on the number, and format the result using the named rule set.\n                        var otherFormatName = CldrRbnfRuleSet.getSafeRendererName(otherFormat);\n                        isSeenByRuleSetType[otherFormatName] = true;\n                        // Turn into this.<otherFormatName>(<expr>)\n                        expressionAsts.push(['call', ['dot', ['name', 'this'], otherFormatName], [expr]]);\n                    } else if (decimalFormat) {\n                        // A DecimalFormat pattern:\n                        // Perform the mathematical operation on the number, and format the result using a DecimalFormat\n                        // with the specified pattern. The pattern must begin with 0 or #.\n                        expressionAsts.push(['call', ['dot', ['name', 'this'], 'renderNumber'], [expr, ['string', decimalFormat]]]);\n                    } else {\n                        // Nothing:\n                        if (specialChar === '>') {\n                            // If you omit the substitution descriptor in a >> substitution in a fraction rule, format the result one digit at a time using the rule set containing the current rule.\n                            expressionAsts.push(['call', ['dot', ['name', 'this'], that.type], [expr]]);\n                        } else if (specialChar === '<') {\n                            // If you omit the substitution descriptor in a << substitution in a rule in a fraction rule set, format the result using the default rule set for this renderer.\n                            // FIXME: Should be the default rule set for this renderer!\n                            expressionAsts.push(['call', ['dot', ['name', 'this'], that.type], [expr]]);\n                        } else {\n                            throw new Error('== not supported!');\n                        }\n                    }\n                } else if (optional) { // [ ... ]\n                    var optionalRuleExpressionAst = ruleToExpressionAst({radix: rule.radix, rbnf: optional, value: rule.value});\n                    expressionAsts.push(['conditional', ['binary', '===', ['name', 'n'], ['num', parseInt(rule.value, 10)]], ['string', ''], optionalRuleExpressionAst]);\n                } else if (literal) {\n                    expressionAsts.push(['string', literal]);\n                } else {\n                    throw new Error('Unknown token in ' + rule.rbnf);\n                }\n            });\n            if (expressionAsts.length === 0) {\n                expressionAsts = [['string', '']];\n            }\n            var expressionAst = expressionAsts.shift();\n            while (expressionAsts.length > 0) {\n                expressionAst = ['binary', '+', expressionAst, expressionAsts.shift()];\n            }\n            return expressionAst;\n        }\n\n        function conditionToStatementAst(conditionAst, rule) {\n            return ['if', conditionAst, ['return', ruleToExpressionAst(rule)], null];\n        }\n\n        var statementAsts = [];\n        if (this.ruleByValue['x.0'] || this.ruleByValue['x.x']) {\n            // var isFractional = n !== Math.floor(n);\n            statementAsts.push(['var', [['isFractional', ['binary', '!==', ['name', 'n'], ['call', ['dot', ['name', 'Math'], 'floor'], [['name', 'n']]]]]]]);\n        }\n        if (this.ruleByValue['x.0']) {\n            statementAsts.push(conditionToStatementAst(['name', 'isFractional'], this.ruleByValue['x.0']));\n        }\n        if (this.ruleByValue['-x']) {\n            statementAsts.push(conditionToStatementAst(['binary', '<', ['name', 'n'], ['num', 0]], this.ruleByValue['-x']));\n        }\n        if (this.ruleByValue['x.x']) {\n            statementAsts.push(conditionToStatementAst(['binary', '&&', ['name', 'isFractional'], ['binary', '>', ['name', 'n'], ['num', 1]]], this.ruleByValue['x.x']));\n        }\n        if (this.ruleByValue['0.x']) {\n            statementAsts.push(conditionToStatementAst(['binary', '&&', ['binary', '>', ['name', 'n'], ['num', 0]], ['binary', '<', ['name', 'n'], ['num', 1]]], this.ruleByValue['0.x']));\n        }\n\n        Object.keys(this.ruleByValue).filter(function (value) {\n            return /^\\d+$/.test(value);\n        }).map(function (value) {\n            return parseInt(value, 10);\n        }).sort(function (a, b) {\n            return b - a;\n        }).forEach(function (numericalValue) {\n            statementAsts.push(conditionToStatementAst(['binary', '>=', ['name', 'n'], ['num', numericalValue]], this.ruleByValue[numericalValue]));\n        }, this);\n\n        return {functionAst: ['function', null, ['n'], statementAsts], dependencies: Object.keys(isSeenByRuleSetType)};\n    }\n};\n\nmodule.exports = CldrRbnfRuleSet;\n","/home/travis/build/npmtest/node-npmtest-cldr/node_modules/cldr/.eslintrc.js":"module.exports = {\n    extends: [\n        'onelint'\n    ],\n    env: {\n        es6: false\n    },\n    parserOptions: null\n};\n","/home/travis/build/npmtest/node-npmtest-cldr/node_modules/cldr/lib/cldrPluralRuleToJavaScriptAst.js":""}